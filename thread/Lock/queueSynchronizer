import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;

public class Mutex implements Lock{
	private static class Sync extends AbstractQueuedSynchronizer{
		@Override
		public boolean isHeldExclusively() {
			return this.getState()==1;
		}
		@Override
		public boolean tryAcquire(int acquires){
			
			if(this.compareAndSetState(0, 1)){
				this.setExclusiveOwnerThread(Thread.currentThread());
				return true;
			}
			return false;
			
		}
		@Override
		protected boolean tryRelease(int release){
			if(this.getState()==0)throw new IllegalMonitorStateException();
			this.setExclusiveOwnerThread(null);
			this.setState(0);
			return true;
		}
		
	
		Condition newCondition(){
			return new ConditionObject();
		}
		
	}
	private final Sync sync = new Sync();

	@Override
	public void lock() {
		// TODO Auto-generated method stub
		sync.acquire(1);
		
	}

	@Override
	public void lockInterruptibly() throws InterruptedException {
		sync.acquireInterruptibly(1);
		
	}

	@Override
	public Condition newCondition() {
		return sync.newCondition();
	}

	@Override
	public boolean tryLock() {
		return sync.tryAcquire(1);
	}

	@Override
	public boolean tryLock(long arg0, TimeUnit arg1) throws InterruptedException {
		return sync.tryAcquireSharedNanos(1, arg1.toNanos(arg0));
	}

	@Override
	public void unlock() {
		sync.release(1);
		
	}
	
}
