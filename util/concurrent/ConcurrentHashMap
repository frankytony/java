concurrent map analysis

 public ConcurrentHashMap() {
        this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL);
        //DEFAULT_INITIAL_CAPACITY=16
        //DEFAULT_LOAD_FACTOR = 0.75f;
        //DEFAULT_CONCURRENCY_LEVEL = 16;
    }

//初始化
   public ConcurrentHashMap(int initialCapacity,
                             float loadFactor, int concurrencyLevel) {
                             
                             //
                             
        //initialCapacity=16
        //loadFactor = 0.75f;
        //concurrencyLevel = 16;
        
        
        if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)
            throw new IllegalArgumentException();

				//MAX_SEGMENTS = 1 << 16;//MAX_SEGMENTS = 65536;
        if (concurrencyLevel > MAX_SEGMENTS)
            concurrencyLevel = MAX_SEGMENTS;

        // Find power-of-two sizes best matching arguments
        int sshift = 0;
        int ssize = 1;
        while (ssize < concurrencyLevel) {//concurrencyLevel=16, 14, 15, //ssize 都为16
            ++sshift;
            ssize <<= 1;
        }
        
        //sshift=1 , ssize=2
        //sshift=2 , ssize=4
        //sshift=3 , ssize=8
        //sshift=4 , ssize=16
        
        segmentShift = 32 - sshift;//segmentShift=28， 16<segmentShift<32
        segmentMask = ssize - 1;//segmentMask=15,   0<segmentMask<65536
        this.segments = Segment.newArray(ssize);//ssize=16
				//initialCapacity=16
				//MAXIMUM_CAPACITY = 1 << 30;
        if (initialCapacity > MAXIMUM_CAPACITY)
            initialCapacity = MAXIMUM_CAPACITY;
        int c = initialCapacity / ssize; //c=1
        if (c * ssize < initialCapacity)
            ++c;
        int cap = 1;
        while (cap < c)
            cap <<= 1;

        for (int i = 0; i < this.segments.length; ++i)
            this.segments[i] = new Segment<K,V>(cap, loadFactor);//loadFactor =0.75, cap 为2的N次方。
    }
    
    
    
    public V put(K key, V value) {
        if (value == null)
            throw new NullPointerException();
           //
        int hash = hash(key.hashCode());
        return segmentFor(hash).put(key, hash, value, false);
    }
    
     /**
     * Applies a supplemental hash function to a given hashCode, which
     * defends against poor quality hash functions.  This is critical
     * because ConcurrentHashMap uses power-of-two length hash tables,
     * that otherwise encounter collisions for hashCodes that do not
     * differ in lower or upper bits.
     */
    private static int hash(int h) {
        // Spread bits to regularize both segment and index locations,
        // using variant of single-word Wang/Jenkins hash.
        h += (h <<  15) ^ 0xffffcd7d;
        h ^= (h >>> 10);
        h += (h <<   3);
        h ^= (h >>>  6);
        h += (h <<   2) + (h << 14);
        return h ^ (h >>> 16);
    }
    
      /**
     * Returns the segment that should be used for key with given hash
     * @param hash the hash code for the key
     * @return the segment
     */
    final Segment<K,V> segmentFor(int hash) {
    //>>>    :     无符号右移，忽略符号位，空位都以0补齐
    
         //sshift=1 , ssize=2
        //sshift=2 , ssize=4
        //sshift=3 , ssize=8
        //sshift=4 , ssize=16
        
        segmentShift = 32 - sshift;//segmentShift=28， 16<segmentShift<32
        segmentMask = ssize - 1;//segmentMask=15,   0<segmentMask<65536
        默认情况下使最高4位发生散列
        return segments[(hash >>> segmentShift) & segmentMask];
    }
    
    
      public V get(Object key) {
        int hash = hash(key.hashCode());
        return segmentFor(hash).get(key, hash);
    }
    
       /* Specialized implementations of map methods */

        V get(Object key, int hash) {
            if (count != 0) { // read-volatile
                HashEntry<K,V> e = getFirst(hash);
                while (e != null) {
                    if (e.hash == hash && key.equals(e.key)) {
                        V v = e.value;
                        if (v != null)
                            return v;
                        return readValueUnderLock(e); // recheck
                    }
                    e = e.next;
                }
            }
            return null;
        }
        
        V put(K key, int hash, V value, boolean onlyIfAbsent) {
            lock();
            try {
                int c = count;
                if (c++ > threshold) // ensure capacity
                    rehash();
                HashEntry<K,V>[] tab = table;
                int index = hash & (tab.length - 1);
                HashEntry<K,V> first = tab[index];
                HashEntry<K,V> e = first;
                while (e != null && (e.hash != hash || !key.equals(e.key)))
                    e = e.next;

                V oldValue;
                if (e != null) {
                    oldValue = e.value;
                    if (!onlyIfAbsent)
                        e.value = value;
                }
                else {
                    oldValue = null;
                    ++modCount;
                    tab[index] = new HashEntry<K,V>(key, hash, first, value);
                    count = c; // write-volatile
                }
                return oldValue;
            } finally {
                unlock();
            }
        }